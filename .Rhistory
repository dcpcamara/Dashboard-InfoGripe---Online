fluidRow(
uiOutput("trends_figure1")
),
h3("Mapa de tendência de SRAG para o curto e longo prazo - somente capitais",
class = "figure-title"),
fluidRow(
uiOutput("trends_figure2")
)
),
# Second Tab: Brazil
tabPanel("Brasil",
# Figures 1 and 2 side by side with a header
h3("Figura 1. Série temporal, estimativa de casos recentes de SRAG e tendências de curto e longo prazo em todo o território nacional - geral e por faixas etárias de interesse.",
class = "figure-title"),
fluidRow(
column(6,
uiOutput("brazil_figure1")),
column(6,
uiOutput("brazil_figure2"))
),
# Figure 3 alone with a header
h3("Figura 2. Incidência e mortalidade nas últimas 8 semanas.",
class = "figure-title"),
fluidRow(
column(12,
uiOutput("brazil_figure3"))
),
# Figures 4 and 5 side by side with a header
h3("Figura 3. Média da incidência e mortalidade semanal de SRAG nas últimas oito semanas, por vírus e faixa etária de interesse.",
class = "figure-title"),
fluidRow(
column(6,
uiOutput("brazil_figure4")),
column(6,
uiOutput("brazil_figure5"))
),
# Figure 6 alone at the bottom
h3("Figura 4. Incidência semanal de SRAG e por vírus identificado laboratorialmente, por faixas etárias de interesse.",
class = "figure-title"),
fluidRow(
column(12,
uiOutput("brazil_figure6"))
)
),
# Third Tab: Brazilian States
tabPanel("Unidades Federativas",
# Dropdown menu for selecting a state
selectInput("selected_state", "Selecione uma Unidade Federativa:",
choices = c("AC", "AL", "AP", "AM", "BA", "CE", "DF",
"ES", "GO", "MA", "MT", "MS",
"MG", "PA", "PB", "PR", "PE", "PI", "RJ",
"RN", "RS", "RO", "RR", "SC",
"SP", "SE", "TO")),
# Titles and images
h3("Figura 1. Série temporal, estimativa de casos recentes de SRAG e tendências de curto e longo prazo por Unidade Federativa.",
class = "figure-title"),
fluidRow(
column(6,
uiOutput("state_image1")),
column(6,
uiOutput("state_image2"))
),
h3("Figura 2. Casos semanais de SRAG por vírus identificado.",
class = "figure-title"),
fluidRow(
uiOutput("state_image3")
)
),
# Fourth Tab: Brazilian Capitals
tabPanel("Capitais",
# Dropdown menu for selecting a capital
selectInput("selected_capital", "Selecione uma Capital:",
choices = sort(c("Aracaju", "Belém", "Belo Horizonte", "Boa Vista", "Brasília", "Campo Grande",
"Cuiabá", "Curitiba", "Florianópolis", "Fortaleza", "Goiânia", "João Pessoa",
"Macapá", "Maceió", "Manaus", "Natal", "Palmas", "Porto Alegre",
"Porto Velho", "Recife", "Rio Branco", "Rio de Janeiro", "Salvador",
"São Luís", "São Paulo", "Teresina", "Vitória"))),
# Display the figures with header titles
h3("Série temporal, estimativa de casos recentes de SRAG e tendências por Capital.",
class = "figure-title"),
fluidRow(
column(6,
uiOutput("capital_image1")),
column(6,
uiOutput("capital_image2"))
)
),
# 5th Tab: Cases per virus
tabPanel("Tabelas",
# Dropdown menu for selecting a capital
column(6, selectInput(inputId = "selected_state",
label ="Selecione um estado:",
choices = c("BR", "AC", "AL", "AP", "AM", "BA", "CE", "DF",
"ES", "GO", "MA", "MT", "MS",
"MG", "PA", "PB", "PR", "PE", "PI", "RJ",
"RN", "RS", "RO", "RR", "SC",
"SP", "SE", "TO")
)
),
column(6, selectInput(inputId = "selected_age",
label ="Selecione uma Faixa Etária:",
choices = c("Total", "< 2", "65+")
)
),
# Display the figures with header titles
h3("Tabela de casos e óbitos de SRAG por agente etiológico",
class = "table-title"),
fluidRow(
column(12,
DT::dataTableOutput('tabela_resumo'))
)
)
)
)
# Definição do servidor
server <- function(input, output, session) {
# Carrega os dados uma única vez ao iniciar o app
dados <- vroom::vroom("https://gitlab.fiocruz.br/marcelo.gomes/infogripe/-/raw/master/Dados/InfoGripe/casos_semanais_fx_etaria_virus_sem_filtro_febre.csv")
# Supondo que 'dados_obt' é outro conjunto de dados relacionado. Se for o mesmo, ajuste conforme necessário.
# Caso você tenha outro arquivo para 'dados_obt', carregue-o aqui. Exemplo:
# dados_obt <- vroom::vroom("URL_DO_DADOS_OBT")
# Para este exemplo, vou supor que 'dados_obt' é igual a 'dados'. Ajuste conforme sua necessidade.
dados_obt <- dados
# Atualiza as escolhas dos selects com base nos dados disponíveis
observe({
estados <- unique(dados$DS_UF_SIGLA)
updateSelectInput(session, "selected_state", choices = sort(estados), selected = "SP") # Define um estado padrão, se desejar
faixas_etarias <- unique(dados$fx_etaria)
updateSelectInput(session, "selected_age", choices = sort(faixas_etarias), selected = faixas_etarias[1])
})
# Processa os dados com base nas seleções do usuário
tabela_processada <- reactive({
req(input$selected_state, input$selected_age) # Garante que os inputs estejam disponíveis
# Filtra os dados para casos
dt_srag <- dados %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Filtra os dados para óbitos
dt_obt <- dados_obt %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Calcula a semana máxima menos 4
max_week <- dt_srag %>%
pull(epiweek) %>%
max(na.rm = TRUE) - 4
# Função auxiliar para calcular percentuais
calcular_percentual <- function(df) {
df %>%
summarise(
`SRAG (n)` = sum(SRAG, na.rm = TRUE),
Positivos = sum(positivos, na.rm = TRUE),
`Flu A %` = round((sum(FLU_A, na.rm = TRUE) * 100) / Positivos, 1),
`Flu B %` = round((sum(FLU_B, na.rm = TRUE) * 100) / Positivos, 1),
`Covid-19 %` = round((sum(SARS2, na.rm = TRUE) * 100) / Positivos, 1),
`VSR %` = round((sum(VSR, na.rm = TRUE) * 100) / Positivos, 1),
`Rino %` = round((sum(RINO, na.rm = TRUE) * 100) / Positivos, 1),
`Aden %` = round((sum(ADNO, na.rm = TRUE) * 100) / Positivos, 1),
`Meta %` = round((sum(METAP, na.rm = TRUE) * 100) / Positivos, 1),
`Boca %` = round((sum(BOCA, na.rm = TRUE) * 100) / Positivos, 1),
`Paraflu %` = round((sum(PARA1, PARA2, PARA3, PARA4, na.rm = TRUE) * 100) / Positivos, 1)
)
}
# Calcula as tabelas para Casos
tabela_srag <- calcular_percentual(dt_srag) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas <- dt_srag %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
# Calcula as tabelas para Óbitos
tabela_srag_obt <- calcular_percentual(dt_obt) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas_obt <- dt_obt %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
# Combina as tabelas
junt <- bind_rows(tabela_srag, tabela_srag_4semanas, tabela_srag_obt, tabela_srag_4semanas_obt)
# Retorna a tabela final
junt
})
# Renderiza a tabela no UI
output$tabela <- renderDT({
tabela_processada() %>%
datatable(
options = list(pageLength = 10, autoWidth = TRUE),
rownames = FALSE
)
})
}
# Executa o aplicativo Shiny
shinyApp(ui = ui, server = server)
library(shiny)
library(vroom)
library(dplyr)
library(DT)
library(tidyr)
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Tabela de Casos e Óbitos de SRAG por Estado e Faixa Etária"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "selected_state",
label = "Selecione o Estado:",
choices = NULL, # Será atualizado no servidor
selected = NULL
),
selectInput(
inputId = "selected_age",
label = "Selecione a Faixa Etária:",
choices = NULL, # Será atualizado no servidor
selected = NULL
)
),
mainPanel(
DTOutput("tabela")
)
)
)
# Definição do servidor
server <- function(input, output, session) {
# Carrega os dados uma única vez ao iniciar o app
dados <- vroom::vroom("https://gitlab.fiocruz.br/marcelo.gomes/infogripe/-/raw/master/Dados/InfoGripe/casos_semanais_fx_etaria_virus_sem_filtro_febre.csv")
# Supondo que 'dados_obt' é outro conjunto de dados relacionado. Se for o mesmo, ajuste conforme necessário.
# Caso você tenha outro arquivo para 'dados_obt', carregue-o aqui. Exemplo:
# dados_obt <- vroom::vroom("URL_DO_DADOS_OBT")
# Para este exemplo, vou supor que 'dados_obt' é igual a 'dados'. Ajuste conforme sua necessidade.
dados_obt <- dados
# Atualiza as escolhas dos selects com base nos dados disponíveis
observe({
estados <- unique(dados$DS_UF_SIGLA)
updateSelectInput(session, "selected_state", choices = sort(estados), selected = "SP") # Define um estado padrão, se desejar
faixas_etarias <- unique(dados$fx_etaria)
updateSelectInput(session, "selected_age", choices = sort(faixas_etarias), selected = faixas_etarias[1])
})
# Processa os dados com base nas seleções do usuário
tabela_processada <- reactive({
req(input$selected_state, input$selected_age) # Garante que os inputs estejam disponíveis
# Filtra os dados para casos
dt_srag <- dados %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Filtra os dados para óbitos
dt_obt <- dados_obt %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Calcula a semana máxima menos 4
max_week <- dt_srag %>%
pull(epiweek) %>%
max(na.rm = TRUE) - 4
# Função auxiliar para calcular percentuais
calcular_percentual <- function(df) {
df %>%
summarise(
`SRAG (n)` = sum(SRAG, na.rm = TRUE),
Positivos = sum(positivos, na.rm = TRUE),
`Flu A %` = round((sum(FLU_A, na.rm = TRUE) * 100) / Positivos, 1),
`Flu B %` = round((sum(FLU_B, na.rm = TRUE) * 100) / Positivos, 1),
`Covid-19 %` = round((sum(SARS2, na.rm = TRUE) * 100) / Positivos, 1),
`VSR %` = round((sum(VSR, na.rm = TRUE) * 100) / Positivos, 1),
`Rino %` = round((sum(RINO, na.rm = TRUE) * 100) / Positivos, 1),
`Aden %` = round((sum(ADNO, na.rm = TRUE) * 100) / Positivos, 1),
`Meta %` = round((sum(METAP, na.rm = TRUE) * 100) / Positivos, 1),
`Boca %` = round((sum(BOCA, na.rm = TRUE) * 100) / Positivos, 1),
`Paraflu %` = round((sum(PARA1, PARA2, PARA3, PARA4, na.rm = TRUE) * 100) / Positivos, 1)
)
}
# Calcula as tabelas para Casos
tabela_srag <- calcular_percentual(dt_srag) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas <- dt_srag %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
# Calcula as tabelas para Óbitos
tabela_srag_obt <- calcular_percentual(dt_obt) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas_obt <- dt_obt %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
# Combina as tabelas
junt <- bind_rows(tabela_srag, tabela_srag_4semanas, tabela_srag_obt, tabela_srag_4semanas_obt)
# Retorna a tabela final
junt
})
# Renderiza a tabela no UI
output$tabela <- renderDT({
tabela_processada() %>%
datatable(
options = list(pageLength = 10, autoWidth = TRUE),
rownames = FALSE
)
})
}
# Executa o aplicativo Shiny
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='danielcamara', token='D0DE5C7B8104A8A20240E7C981559534', secret='C580Xl0MimrspsgMI21fUSDs+v8VQ/gfXzF0MDjU')
library(rsconnect)
rsconnect::deployApp('../Dashboard InfoGripe - Online/')
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Tabela de Casos e Óbitos de SRAG por Estado e Faixa Etária"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "selected_state",
label = "Selecione o Estado:",
choices = NULL, # Será atualizado no servidor
selected = NULL
),
selectInput(
inputId = "selected_age",
label = "Selecione a Faixa Etária:",
choices = NULL, # Será atualizado no servidor
selected = NULL
)
),
mainPanel(
DTOutput("tabela")
)
)
)
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Tabela de Casos e Óbitos de SRAG por Estado e Faixa Etária"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "selected_state",
label = "Selecione o Estado:",
choices = NULL, # Será atualizado no servidor
selected = NULL
),
selectInput(
inputId = "selected_age",
label = "Selecione a Faixa Etária:",
choices = NULL, # Será atualizado no servidor
selected = NULL
)
),
mainPanel(
DTOutput("tabela")
)
)
)
library(shiny)
library(vroom)
library(dplyr)
library(DT)
library(tidyr)
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Tabela de Casos e Óbitos de SRAG por Estado e Faixa Etária"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "selected_state",
label = "Selecione o Estado:",
choices = NULL, # Será atualizado no servidor
selected = NULL
),
selectInput(
inputId = "selected_age",
label = "Selecione a Faixa Etária:",
choices = NULL, # Será atualizado no servidor
selected = NULL
)
),
mainPanel(
DTOutput("tabela")
)
)
)
# Definição do servidor
server <- function(input, output, session) {
# Carrega os dados uma única vez ao iniciar o app
dados <- vroom::vroom("https://gitlab.fiocruz.br/marcelo.gomes/infogripe/-/raw/master/Dados/InfoGripe/casos_semanais_fx_etaria_virus_sem_filtro_febre.csv")
# Supondo que 'dados_obt' é outro conjunto de dados relacionado. Se for o mesmo, ajuste conforme necessário.
# Caso você tenha outro arquivo para 'dados_obt', carregue-o aqui. Exemplo:
# dados_obt <- vroom::vroom("URL_DO_DADOS_OBT")
# Para este exemplo, vou supor que 'dados_obt' é igual a 'dados'. Ajuste conforme sua necessidade.
dados_obt <- dados
# Atualiza as escolhas dos selects com base nos dados disponíveis
observe({
estados <- unique(dados$DS_UF_SIGLA)
updateSelectInput(session, "selected_state", choices = sort(estados), selected = "SP") # Define um estado padrão, se desejar
faixas_etarias <- unique(dados$fx_etaria)
updateSelectInput(session, "selected_age", choices = sort(faixas_etarias), selected = faixas_etarias[1])
})
# Processa os dados com base nas seleções do usuário
tabela_processada <- reactive({
req(input$selected_state, input$selected_age) # Garante que os inputs estejam disponíveis
# Filtra os dados para casos
dt_srag <- dados %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Filtra os dados para óbitos
dt_obt <- dados_obt %>%
filter(DS_UF_SIGLA == input$selected_state,
epiyear == 2024,
fx_etaria == input$selected_age)
# Calcula a semana máxima menos 4
max_week <- dt_srag %>%
pull(epiweek) %>%
max(na.rm = TRUE) - 4
# Função auxiliar para calcular percentuais
calcular_percentual <- function(df) {
df %>%
summarise(
`SRAG (n)` = sum(SRAG, na.rm = TRUE),
Positivos = sum(positivos, na.rm = TRUE),
`Flu A %` = round((sum(FLU_A, na.rm = TRUE) * 100) / Positivos, 1),
`Flu B %` = round((sum(FLU_B, na.rm = TRUE) * 100) / Positivos, 1),
`Covid-19 %` = round((sum(SARS2, na.rm = TRUE) * 100) / Positivos, 1),
`VSR %` = round((sum(VSR, na.rm = TRUE) * 100) / Positivos, 1),
`Rino %` = round((sum(RINO, na.rm = TRUE) * 100) / Positivos, 1),
`Aden %` = round((sum(ADNO, na.rm = TRUE) * 100) / Positivos, 1),
`Meta %` = round((sum(METAP, na.rm = TRUE) * 100) / Positivos, 1),
`Boca %` = round((sum(BOCA, na.rm = TRUE) * 100) / Positivos, 1),
`Paraflu %` = round((sum(PARA1, PARA2, PARA3, PARA4, na.rm = TRUE) * 100) / Positivos, 1)
)
}
# Calcula as tabelas para Casos
tabela_srag <- calcular_percentual(dt_srag) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas <- dt_srag %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Casos", .before = "Período") %>%
select(-Positivos)
# Calcula as tabelas para Óbitos
tabela_srag_obt <- calcular_percentual(dt_obt) %>%
mutate(Período = "2024", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
tabela_srag_4semanas_obt <- dt_obt %>%
filter(epiweek > max_week) %>%
calcular_percentual() %>%
mutate(Período = "4 semanas", .before = "SRAG (n)") %>%
mutate(Dados = "Óbitos", .before = "Período") %>%
select(-Positivos)
# Combina as tabelas
junt <- bind_rows(tabela_srag, tabela_srag_4semanas, tabela_srag_obt, tabela_srag_4semanas_obt)
# Retorna a tabela final
junt
})
# Renderiza a tabela no UI
output$tabela <- renderDT({
tabela_processada() %>%
datatable(
options = list(pageLength = 10, autoWidth = TRUE),
rownames = FALSE
)
})
}
# Executa o aplicativo Shiny
shinyApp(ui = ui, server = server)
shiny::runApp()
library(rsconnect)
rsconnect::deployApp('../Dashboard InfoGripe - Online/')
